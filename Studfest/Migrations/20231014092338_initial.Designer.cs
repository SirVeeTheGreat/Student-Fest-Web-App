// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Studfest.Data;

#nullable disable

namespace Studfest.Migrations
{
    [DbContext(typeof(StudentFestDb))]
    [Migration("20231014092338_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Studfest.Models.ApprovedDeliveryTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeliveryTeamId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryTeamId");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryTeamId");

                    b.ToTable("ApprovedDeliveryTeams");
                });

            modelBuilder.Entity("Studfest.Models.ApprovedVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("ApprovedVendors");
                });

            modelBuilder.Entity("Studfest.Models.ContactDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlternativeEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AlternativeNumber")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryTeamId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryTeamId");

                    b.Property<int>("MobileNumber")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VenderId");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryTeamId");

                    b.HasIndex("VendorId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("Studfest.Models.DeliveryInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DeliveryCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryHouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Deliverysuburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("receiptContactNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DeliveryInformation");
                });

            modelBuilder.Entity("Studfest.Models.DeliveryTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DriverProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriversLicence")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceProvidersDocumentsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleRegistrationNumber")
                        .HasColumnType("int");

                    b.Property<string>("VehileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProvidersDocumentsId");

                    b.ToTable("DeliveryTeam");
                });

            modelBuilder.Entity("Studfest.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliverInfoId")
                        .HasColumnType("int")
                        .HasColumnName("DeliverInfoId");

                    b.Property<int>("DeliveryTeamId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryTeamId");

                    b.Property<DateTime>("EstimatedDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("DeliverInfoId");

                    b.HasIndex("DeliveryTeamId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Studfest.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BoxItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorId");

                    b.Property<string>("Warranty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Studfest.Models.ResidentalAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorId");

                    b.Property<string>("suburb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("ResidentalAddresses");
                });

            modelBuilder.Entity("Studfest.Models.ServiceProvidersDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUploaded")
                        .HasColumnType("bit");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("ServicesDocuments");
                });

            modelBuilder.Entity("Studfest.Models.Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Studfest.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DriverProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceProvidersDocumentsId")
                        .HasColumnType("int");

                    b.Property<string>("VendorEmailAddresss")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorIdNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("VendorLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProvidersDocumentsId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Studfest.Models.ApprovedDeliveryTeam", b =>
                {
                    b.HasOne("Studfest.Models.DeliveryTeam", "DeliveryTeam")
                        .WithMany("ApprovedDeliveryTeams")
                        .HasForeignKey("DeliveryTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryTeam");
                });

            modelBuilder.Entity("Studfest.Models.ApprovedVendor", b =>
                {
                    b.HasOne("Studfest.Models.Vendor", "Vendor")
                        .WithMany("ApprovedVendor")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Studfest.Models.ContactDetails", b =>
                {
                    b.HasOne("Studfest.Models.DeliveryTeam", "DeliveryTeams")
                        .WithMany("ContactDetails")
                        .HasForeignKey("DeliveryTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Studfest.Models.Vendor", "Vendors")
                        .WithMany("ContactDetails")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryTeams");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Studfest.Models.DeliveryTeam", b =>
                {
                    b.HasOne("Studfest.Models.ServiceProvidersDocuments", null)
                        .WithMany("DeliveryTeams")
                        .HasForeignKey("ServiceProvidersDocumentsId");
                });

            modelBuilder.Entity("Studfest.Models.Order", b =>
                {
                    b.HasOne("Studfest.Models.DeliveryInformation", "DeliveryInformation")
                        .WithMany("Orders")
                        .HasForeignKey("DeliverInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Studfest.Models.DeliveryTeam", "DeliveryTeam")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Studfest.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryInformation");

                    b.Navigation("DeliveryTeam");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Studfest.Models.Product", b =>
                {
                    b.HasOne("Studfest.Models.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Studfest.Models.ResidentalAddress", b =>
                {
                    b.HasOne("Studfest.Models.Vendor", "Vendor")
                        .WithMany("ResidentalAddress")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Studfest.Models.ServiceProvidersDocuments", b =>
                {
                    b.HasOne("Studfest.Models.Vendor", "Vendor")
                        .WithMany("Documents")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Studfest.Models.Services", b =>
                {
                    b.HasOne("Studfest.Models.Vendor", "Vendor")
                        .WithMany("Services")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Studfest.Models.Vendor", b =>
                {
                    b.HasOne("Studfest.Models.ServiceProvidersDocuments", null)
                        .WithMany("Vendors")
                        .HasForeignKey("ServiceProvidersDocumentsId");
                });

            modelBuilder.Entity("Studfest.Models.DeliveryInformation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Studfest.Models.DeliveryTeam", b =>
                {
                    b.Navigation("ApprovedDeliveryTeams");

                    b.Navigation("ContactDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Studfest.Models.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Studfest.Models.ServiceProvidersDocuments", b =>
                {
                    b.Navigation("DeliveryTeams");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Studfest.Models.Vendor", b =>
                {
                    b.Navigation("ApprovedVendor");

                    b.Navigation("ContactDetails");

                    b.Navigation("Documents");

                    b.Navigation("Products");

                    b.Navigation("ResidentalAddress");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
